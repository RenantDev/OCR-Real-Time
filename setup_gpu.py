#!/usr/bin/env python3
"""
Script de Setup para Detector de Objetos com GPU
===============================================

Verifica e configura automaticamente o ambiente para usar GPU.
"""

import subprocess
import sys
import os

def executar_comando(comando):
    """Executa um comando e retorna o resultado."""
    try:
        resultado = subprocess.run(comando, shell=True, capture_output=True, text=True)
        return resultado.returncode == 0, resultado.stdout, resultado.stderr
    except Exception as e:
        return False, "", str(e)

def verificar_cuda():
    """Verifica se CUDA est√° instalado no sistema."""
    print("üîç Verificando CUDA...")
    
    # Verifica nvidia-smi
    sucesso, saida, erro = executar_comando("nvidia-smi")
    if sucesso:
        print("‚úÖ NVIDIA GPU detectada:")
        print(saida)
        return True
    else:
        print("‚ùå NVIDIA GPU n√£o detectada ou drivers n√£o instalados")
        print("   Erro:", erro)
        return False

def verificar_pytorch_cuda():
    """Verifica se PyTorch tem suporte CUDA."""
    print("\nüîç Verificando PyTorch CUDA...")
    
    try:
        import torch
        if torch.cuda.is_available():
            print(f"‚úÖ PyTorch CUDA dispon√≠vel")
            print(f"   Vers√£o PyTorch: {torch.__version__}")
            print(f"   Vers√£o CUDA: {torch.version.cuda}")
            print(f"   GPUs dispon√≠veis: {torch.cuda.device_count()}")
            for i in range(torch.cuda.device_count()):
                print(f"   GPU {i}: {torch.cuda.get_device_name(i)}")
            return True
        else:
            print("‚ùå PyTorch instalado mas sem suporte CUDA")
            return False
    except ImportError:
        print("‚ùå PyTorch n√£o instalado")
        return False

def instalar_dependencias():
    """Instala as depend√™ncias necess√°rias."""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Lista de depend√™ncias
    dependencias = [
        "ultralytics>=8.0.0",
        "opencv-python>=4.8.0", 
        "numpy>=1.24.0",
        "pillow>=9.0.0",
        "matplotlib>=3.5.0",
        "seaborn>=0.11.0"
    ]
    
    for dep in dependencias:
        print(f"   Instalando {dep}...")
        sucesso, saida, erro = executar_comando(f"pip install {dep}")
        if sucesso:
            print(f"   ‚úÖ {dep} instalado")
        else:
            print(f"   ‚ùå Erro ao instalar {dep}: {erro}")

def instalar_pytorch_cuda():
    """Instala PyTorch com suporte CUDA."""
    print("\nüöÄ Instalando PyTorch com CUDA...")
    
    # Tenta detectar a vers√£o do CUDA
    sucesso, saida, erro = executar_comando("nvcc --version")
    if sucesso:
        # Extrai vers√£o do CUDA
        for linha in saida.split('\n'):
            if 'release' in linha.lower():
                versao = linha.split('release')[1].split(',')[0].strip()
                print(f"   Vers√£o CUDA detectada: {versao}")
                
                # Instala vers√£o apropriada do PyTorch
                if '11.8' in versao:
                    comando = "pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118"
                elif '12.1' in versao:
                    comando = "pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121"
                else:
                    comando = "pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118"
                
                print(f"   Executando: {comando}")
                sucesso, saida, erro = executar_comando(comando)
                if sucesso:
                    print("   ‚úÖ PyTorch CUDA instalado com sucesso")
                    return True
                else:
                    print(f"   ‚ùå Erro: {erro}")
                    return False
    else:
        print("   ‚ö†Ô∏è  N√£o foi poss√≠vel detectar vers√£o do CUDA")
        print("   Tentando instalar vers√£o padr√£o...")
        
        comando = "pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118"
        sucesso, saida, erro = executar_comando(comando)
        if sucesso:
            print("   ‚úÖ PyTorch CUDA instalado")
            return True
        else:
            print(f"   ‚ùå Erro: {erro}")
            return False

def testar_detector():
    """Testa se o detector funciona corretamente."""
    print("\nüß™ Testando detector...")
    
    try:
        from ultralytics import YOLO
        import torch
        
        # Testa carregamento do modelo
        modelo = YOLO("yolov8n.pt")
        
        # Testa GPU
        if torch.cuda.is_available():
            modelo.to("cuda")
            print("‚úÖ Teste GPU: OK")
        else:
            print("‚ö†Ô∏è  GPU n√£o dispon√≠vel - usando CPU")
        
        print("‚úÖ Detector funcionando corretamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Setup do Detector de Objetos com GPU")
    print("=" * 50)
    
    # Verifica CUDA
    cuda_disponivel = verificar_cuda()
    
    # Verifica PyTorch
    pytorch_ok = verificar_pytorch_cuda()
    
    if not pytorch_ok:
        print("\nüì¶ PyTorch CUDA n√£o encontrado. Instalando...")
        if instalar_pytorch_cuda():
            pytorch_ok = True
        else:
            print("‚ùå Falha ao instalar PyTorch CUDA")
            return 1
    
    # Instala outras depend√™ncias
    instalar_dependencias()
    
    # Testa o detector
    if testar_detector():
        print("\nüéâ Setup conclu√≠do com sucesso!")
        print("\nüìã Para usar o detector:")
        print("   python main.py")
        print("\nüìã Para for√ßar CPU (n√£o recomendado):")
        print("   python main.py --cpu")
        return 0
    else:
        print("\n‚ùå Setup falhou")
        return 1

if __name__ == "__main__":
    exit(main()) 