# -*- coding: utf-8 -*-
"""
Exemplo de uso do modo predict do Ultralytics YOLO
Baseado na documenta√ß√£o oficial: https://docs.ultralytics.com/pt/modes/predict/

Este script demonstra as melhores pr√°ticas para infer√™ncia em tempo real
usando as funcionalidades recomendadas pela documenta√ß√£o oficial.
"""

import cv2
import numpy as np
from ultralytics import YOLO
import time
import torch
import threading
from threading import Lock

class ExemploPredict:
    """Exemplo de implementa√ß√£o seguindo as melhores pr√°ticas da documenta√ß√£o oficial."""
    
    def __init__(self, modelo="yolov8n-seg.pt"):
        """
        Inicializa o exemplo seguindo as recomenda√ß√µes da documenta√ß√£o.
        
        Args:
            modelo: Modelo YOLO para usar
        """
        # Verifica GPU
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"üîß Dispositivo: {self.device}")
        
        # Carrega modelo
        print(f"üì• Carregando modelo: {modelo}")
        self.modelo = YOLO(modelo)
        if self.device == "cuda":
            self.modelo.to(self.device)
        
        # Thread-safety lock (recomendado na documenta√ß√£o)
        self._lock = Lock()
        
        # Configura√ß√µes de infer√™ncia (baseadas na documenta√ß√£o)
        self.conf = 0.5
        self.iou = 0.5
        self.imgsz = 640
        self.max_det = 20
        
        print("‚úÖ Exemplo inicializado seguindo as melhores pr√°ticas da documenta√ß√£o")
        
    def inferencia_basica(self, imagem):
        """
        Infer√™ncia b√°sica seguindo a documenta√ß√£o oficial.
        
        Args:
            imagem: Imagem para processar
            
        Returns:
            Resultados da infer√™ncia
        """
        # Thread-safety conforme documenta√ß√£o
        with self._lock:
            resultados = self.modelo.predict(
                imagem,
                conf=self.conf,
                iou=self.iou,
                imgsz=self.imgsz,
                max_det=self.max_det,
                verbose=False,
                stream=True,  # Modo stream para melhor performance
                device=self.device
            )
            return next(resultados)
    
    def inferencia_com_plot(self, imagem):
        """
        Infer√™ncia usando m√©todo plot() da documenta√ß√£o.
        
        Args:
            imagem: Imagem para processar
            
        Returns:
            Imagem com anota√ß√µes
        """
        with self._lock:
            resultados = self.modelo.predict(
                imagem,
                conf=self.conf,
                imgsz=self.imgsz,
                verbose=False,
                stream=True,
                device=self.device
            )
            
            resultado = next(resultados)
            
            # Usa m√©todo plot() da documenta√ß√£o
            imagem_plotada = resultado.plot(
                labels=True,      # Mostrar labels
                boxes=True,       # Mostrar bounding boxes
                masks=True,       # Mostrar m√°scaras (se dispon√≠vel)
                conf=True,        # Mostrar confian√ßa
                line_width=2      # Espessura das linhas (corrigido)
            )
            
            return imagem_plotada, len(resultado.boxes)
    
    def inferencia_multithread(self, imagens):
        """
        Exemplo de infer√™ncia multithread conforme documenta√ß√£o.
        
        Args:
            imagens: Lista de imagens para processar
            
        Returns:
            Lista de resultados
        """
        def processar_imagem(imagem, resultados, idx):
            """Fun√ß√£o para processar uma imagem em thread separada."""
            # Cada thread cria sua pr√≥pria inst√¢ncia do modelo (thread-safety)
            modelo_thread = YOLO(self.modelo.ckpt_path)
            if self.device == "cuda":
                modelo_thread.to(self.device)
            
            resultado = modelo_thread.predict(
                imagem,
                conf=self.conf,
                imgsz=self.imgsz,
                verbose=False,
                device=self.device
            )[0]
            
            resultados[idx] = resultado
        
        # Processa imagens em threads separadas
        threads = []
        resultados = [None] * len(imagens)
        
        for i, imagem in enumerate(imagens):
            thread = threading.Thread(
                target=processar_imagem,
                args=(imagem, resultados, i)
            )
            threads.append(thread)
            thread.start()
        
        # Aguarda todas as threads terminarem
        for thread in threads:
            thread.join()
        
        return resultados
    
    def exemplo_stream_video(self, caminho_video):
        """
        Exemplo de processamento de v√≠deo usando stream conforme documenta√ß√£o.
        
        Args:
            caminho_video: Caminho para o arquivo de v√≠deo
        """
        cap = cv2.VideoCapture(caminho_video)
        
        if not cap.isOpened():
            print(f"‚ùå Erro ao abrir v√≠deo: {caminho_video}")
            return
        
        print("üé¨ Processando v√≠deo com stream...")
        
        while cap.isOpened():
            success, frame = cap.read()
            
            if not success:
                break
            
            # Processa frame usando stream
            with self._lock:
                resultados = self.modelo.predict(
                    frame,
                    conf=self.conf,
                    imgsz=self.imgsz,
                    verbose=False,
                    stream=True,
                    device=self.device
                )
                
                resultado = next(resultados)
                frame_processado = resultado.plot()
            
            # Exibe resultado
            cv2.imshow("V√≠deo Processado", frame_processado)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ Processamento de v√≠deo conclu√≠do")
    
    def exemplo_batch_inference(self, imagens):
        """
        Exemplo de infer√™ncia em lote conforme documenta√ß√£o.
        
        Args:
            imagens: Lista de imagens para processar em lote
            
        Returns:
            Lista de resultados
        """
        print(f"üì¶ Processando {len(imagens)} imagens em lote...")
        
        with self._lock:
            # Infer√™ncia em lote (mais eficiente)
            resultados = self.modelo.predict(
                imagens,
                conf=self.conf,
                imgsz=self.imgsz,
                verbose=False,
                device=self.device
            )
        
        print(f"‚úÖ Processamento em lote conclu√≠do: {len(resultados)} resultados")
        return resultados

def main():
    """Fun√ß√£o principal demonstrando os exemplos."""
    print("üöÄ Exemplo de uso do modo predict do Ultralytics YOLO")
    print("üìö Baseado na documenta√ß√£o oficial: https://docs.ultralytics.com/pt/modes/predict/")
    print()
    
    # Cria exemplo
    exemplo = ExemploPredict("yolov8n-seg.pt")
    
    # Exemplo com webcam
    print("üìπ Iniciando exemplo com webcam...")
    print("üí° Pressione 'q' para sair")
    
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå Erro ao abrir webcam")
        return
    
    try:
        while True:
            success, frame = cap.read()
            
            if not success:
                break
            
            # Processa frame usando m√©todo plot() da documenta√ß√£o
            frame_processado, num_deteccoes = exemplo.inferencia_com_plot(frame)
            
            # Adiciona informa√ß√µes
            cv2.putText(frame_processado, f"Dete√ß√µes: {num_deteccoes}", 
                       (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame_processado, "Pressione 'q' para sair", 
                       (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Exibe resultado
            cv2.imshow("Exemplo Predict - Documenta√ß√£o Oficial", frame_processado)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Interrompido pelo usu√°rio")
    finally:
        cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ Exemplo conclu√≠do")

if __name__ == "__main__":
    main() 