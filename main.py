#!/usr/bin/env python3
"""
Detector de Pessoas em Tempo Real com YOLOv8
============================================

Vers√£o otimizada para detec√ß√£o de pessoas via webcam sem lentid√£o.
Usa GPU (CUDA) para m√°xima performance.
"""

import cv2
import numpy as np
from ultralytics import YOLO
import argparse
import time
import torch

class DetectorPessoas:
    """Classe otimizada para detec√ß√£o de pessoas em tempo real usando GPU."""
    
    def __init__(self, modelo="yolov8n.pt", confianca=0.5, tamanho_img=640):
        """
        Inicializa o detector de pessoas.
        
        Args:
            modelo: Caminho para o modelo YOLO
            confianca: Limiar de confian√ßa (0.0 a 1.0)
            tamanho_img: Tamanho da imagem para infer√™ncia
        """
        # Verifica se CUDA est√° dispon√≠vel
        self.device = self._verificar_gpu()
        
        # Carrega o modelo na GPU se dispon√≠vel
        self.modelo = YOLO(modelo)
        if self.device == "cuda":
            self.modelo.to(self.device)
            print(f"‚úÖ GPU detectada: {torch.cuda.get_device_name()}")
            print(f"‚úÖ Mem√≥ria GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f}GB")
        else:
            print("‚ö†Ô∏è  GPU n√£o detectada - usando CPU (performance reduzida)")
        
        self.confianca = confianca
        self.tamanho_img = tamanho_img
        self.fps_anterior = time.time()
        self.fps_atual = 0
        
        # Classe 'person' no COCO dataset √© 0
        self.classe_pessoa = 0
        
        print(f"üéØ Modo: Detec√ß√£o de Pessoas")
        print(f"üéØ Confian√ßa m√≠nima: {confianca}")
        
    def _verificar_gpu(self):
        """Verifica se CUDA est√° dispon√≠vel e retorna o dispositivo apropriado."""
        if torch.cuda.is_available():
            # Verifica se h√° GPUs dispon√≠veis
            if torch.cuda.device_count() > 0:
                # Configura para usar a primeira GPU
                torch.cuda.set_device(0)
                return "cuda"
        return "cpu"
        
    def configurar_camera(self, dispositivo=0, largura=640, altura=480, fps=30):
        """
        Configura a c√¢mera com par√¢metros otimizados.
        
        Args:
            dispositivo: √çndice da c√¢mera (0, 1, 2...)
            largura: Largura do frame
            altura: Altura do frame
            fps: FPS desejado
        """
        self.cap = cv2.VideoCapture(dispositivo)
        
        if not self.cap.isOpened():
            raise RuntimeError(f"N√£o foi poss√≠vel abrir a c√¢mera {dispositivo}")
        
        # Configura√ß√µes otimizadas para performance
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, largura)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, altura)
        self.cap.set(cv2.CAP_PROP_FPS, fps)
        self.cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))
        self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # Buffer m√≠nimo para reduzir lat√™ncia
        
        # Configura√ß√µes adicionais para melhor performance
        self.cap.set(cv2.CAP_PROP_AUTOFOCUS, 0)  # Desabilita autofoco
        self.cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 0.25)  # Exposi√ß√£o manual
        
        print(f"üìπ C√¢mera configurada: {largura}x{altura} @ {fps}fps")
        
    def calcular_fps(self):
        """Calcula e atualiza o FPS atual."""
        agora = time.time()
        self.fps_atual = 1.0 / (agora - self.fps_anterior)
        self.fps_anterior = agora
        
    def detectar_pessoas(self, frame):
        """
        Detecta pessoas em um frame usando GPU.
        
        Args:
            frame: Frame da c√¢mera
            
        Returns:
            Frame com detec√ß√µes de pessoas desenhadas
        """
        # Infer√™ncia otimizada com GPU - apenas pessoas
        resultados = self.modelo.predict(
            frame, 
            imgsz=self.tamanho_img, 
            conf=self.confianca, 
            verbose=False,
            stream=False,  # Desabilita streaming para melhor performance
            device=self.device,  # For√ßa uso da GPU
            classes=[self.classe_pessoa]  # Filtra apenas pessoas
        )[0]
        
        # Desenha as detec√ß√µes
        frame_detectado = resultados.plot()
        
        # Adiciona informa√ß√µes de FPS
        self.calcular_fps()
        
        # Cor baseada no FPS (verde = bom, amarelo = m√©dio, vermelho = ruim)
        if self.fps_atual >= 25:
            cor_fps = (0, 255, 0)  # Verde
        elif self.fps_atual >= 15:
            cor_fps = (0, 255, 255)  # Amarelo
        else:
            cor_fps = (0, 0, 255)  # Vermelho
            
        cv2.putText(
            frame_detectado, 
            f"FPS: {self.fps_atual:.1f}", 
            (10, 30), 
            cv2.FONT_HERSHEY_SIMPLEX, 
            1, 
            cor_fps, 
            2
        )
        
        # Adiciona contador de pessoas detectadas
        num_pessoas = len(resultados.boxes)
        cv2.putText(
            frame_detectado, 
            f"Pessoas: {num_pessoas}", 
            (10, 70), 
            cv2.FONT_HERSHEY_SIMPLEX, 
            1, 
            (0, 255, 255), 
            2
        )
        
        # Adiciona informa√ß√£o do dispositivo usado
        dispositivo_texto = "GPU" if self.device == "cuda" else "CPU"
        cv2.putText(
            frame_detectado, 
            f"Dispositivo: {dispositivo_texto}", 
            (10, 110), 
            cv2.FONT_HERSHEY_SIMPLEX, 
            0.7, 
            (255, 255, 255), 
            2
        )
        
        # Adiciona informa√ß√µes de confian√ßa m√©dia se pessoas detectadas
        if num_pessoas > 0:
            confiancas = [box.conf.item() for box in resultados.boxes]
            conf_media = sum(confiancas) / len(confiancas)
            cv2.putText(
                frame_detectado, 
                f"Conf. M√©dia: {conf_media:.2f}", 
                (10, 150), 
                cv2.FONT_HERSHEY_SIMPLEX, 
                0.7, 
                (255, 255, 0), 
                2
            )
        
        return frame_detectado
    
    def executar(self):
        """Loop principal de detec√ß√£o de pessoas."""
        print("üöÄ Iniciando detec√ß√£o de pessoas...")
        print("üìã Controles:")
        print("   'q' - Sair")
        print("   's' - Salvar frame atual")
        print("   'i' - Informa√ß√µes da GPU")
        print("   '+' - Aumentar confian√ßa")
        print("   '-' - Diminuir confian√ßa")
        
        try:
            while True:
                # Captura frame
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå Erro ao capturar frame")
                    break
                
                # Detecta pessoas
                frame_processado = self.detectar_pessoas(frame)
                
                # Exibe resultado
                cv2.imshow("Detector de Pessoas - YOLOv8 (GPU)", frame_processado)
                
                # Controle de teclas
                tecla = cv2.waitKey(1) & 0xFF
                if tecla == ord('q'):
                    break
                elif tecla == ord('s'):
                    timestamp = time.strftime("%Y%m%d_%H%M%S")
                    cv2.imwrite(f"pessoas_{timestamp}.jpg", frame_processado)
                    print(f"üíæ Frame salvo: pessoas_{timestamp}.jpg")
                elif tecla == ord('i'):
                    self._mostrar_info_gpu()
                elif tecla == ord('+') or tecla == ord('='):
                    self.confianca = min(1.0, self.confianca + 0.05)
                    print(f"üéØ Confian√ßa aumentada: {self.confianca:.2f}")
                elif tecla == ord('-') or tecla == ord('_'):
                    self.confianca = max(0.1, self.confianca - 0.05)
                    print(f"üéØ Confian√ßa diminu√≠da: {self.confianca:.2f}")
                    
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Interrompido pelo usu√°rio")
        finally:
            self.liberar()
    
    def _mostrar_info_gpu(self):
        """Mostra informa√ß√µes detalhadas da GPU."""
        if self.device == "cuda":
            print("\nüîç Informa√ß√µes da GPU:")
            print(f"   Nome: {torch.cuda.get_device_name()}")
            print(f"   Mem√≥ria Total: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f}GB")
            print(f"   Mem√≥ria Alocada: {torch.cuda.memory_allocated(0) / 1024**3:.1f}GB")
            print(f"   Mem√≥ria Cache: {torch.cuda.memory_reserved(0) / 1024**3:.1f}GB")
            print(f"   FPS Atual: {self.fps_atual:.1f}")
            print(f"   Confian√ßa Atual: {self.confianca:.2f}")
        else:
            print("\n‚ö†Ô∏è  GPU n√£o dispon√≠vel - usando CPU")
    
    def liberar(self):
        """Libera recursos da c√¢mera e GPU."""
        if hasattr(self, 'cap'):
            self.cap.release()
        
        # Limpa cache da GPU
        if self.device == "cuda":
            torch.cuda.empty_cache()
            
        cv2.destroyAllWindows()
        print("üßπ Recursos liberados")

def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(description="Detector de Pessoas em Tempo Real com GPU")
    parser.add_argument("--modelo", default="yolov8n.pt", help="Modelo YOLO (padr√£o: yolov8n.pt)")
    parser.add_argument("--confianca", type=float, default=0.5, help="Limiar de confian√ßa (0.0-1.0)")
    parser.add_argument("--tamanho", type=int, default=640, help="Tamanho da imagem para infer√™ncia")
    parser.add_argument("--camera", type=int, default=0, help="√çndice da c√¢mera")
    parser.add_argument("--largura", type=int, default=640, help="Largura do frame")
    parser.add_argument("--altura", type=int, default=480, help="Altura do frame")
    parser.add_argument("--fps", type=int, default=30, help="FPS desejado")
    parser.add_argument("--cpu", action="store_true", help="For√ßar uso da CPU (n√£o recomendado)")

    args = parser.parse_args()

    try:
        # Cria e configura o detector
        detector = DetectorPessoas(
            modelo=args.modelo,
            confianca=args.confianca,
            tamanho_img=args.tamanho
        )
        
        # For√ßa CPU se solicitado
        if args.cpu:
            detector.device = "cpu"
            detector.modelo.to("cpu")
            print("‚ö†Ô∏è  Modo CPU for√ßado pelo usu√°rio")
        
        # Configura a c√¢mera
        detector.configurar_camera(
            dispositivo=args.camera,
            largura=args.largura,
            altura=args.altura,
            fps=args.fps
        )
        
        # Executa a detec√ß√£o
        detector.executar()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
